spring.mvc.view.prefix = /WEB-INF/views/
spring.mvc.view.suffix = .jsp
# MySQL JDBC
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.jdbc-url=jdbc:mysql://localhost:3306/dbm?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.jdbc-url=jdbc:log4jdbc:mysql://localhost:3306/dbm?serverTimezone=UTC&characterEncoding=UTF-8&allowMultiQueries=true
#연결 여부 확인을 위한 테스트 쿼리
spring.datasource.hikari.connection-test-query=SELECT 1
#로깅 대상(개발 / 배포) 배포시에는 local -> prod
spring.profiles.active=local
logging.config=classpath:log4j2.xml

spring.datasource.username=root
spring.datasource.password=801eheh2
# 처리시 발생하는 SQL을 보여줄 것인지 결정
spring.jpa.show-sql=true
# 프로젝트 실행시 자동으로 DDL(create, alter, drop) 을 생성할 것 인지 결정하는 설정
# create : 매번 테이블 생성을 새로 시도한다 / update : 변경이 필요한 경우 alter로 변경되고 테이블이 없는경우 create가 된다
spring.jpa.hibernate.ddl-auto=create
# 실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력한다 -> 실행되는 SQL의 가독성을 높여준다
spring.jpa.properties.hibernate.format_sql=true

#log4j2 사용
#logging.config=classpath:log4j2.xml
# 콘솔 창에 출력되는 로깅 메세지를 색으로 구분해서 출력
#spring.output.ansi.enabled=always
# 로그 메세지가 저장되는 로그 디렉터리
logging.file.path=logs
# logging.level.{패키지 경로}를 통해 로깅 레벨을 결정할 수 있슴
#logging.level.com.tutorial.springboot=DEBUG